using Test, RationalPolygons

@testset "Koelman's classification" begin
    
    max_number_of_lattice_points = 30

    st = InMemoryKoelmanStorage{Int}()
    classify_polygons_by_number_of_lattice_points(st, max_number_of_lattice_points)
    Pss = st.polygons

    a371917 = [0, 0, 1, 3, 6, 13, 21, 41, 67, 111, 175, 286, 419, 643, 938, 1370, 1939, 2779, 3819, 5293, 7191, 9752, 12991, 17321, 22641, 29687, 38533, 49796, 63621, 81300]

    for l = 1 : max_number_of_lattice_points
        @test length(Pss[l]) == a371917[l]
        @test all(P -> number_of_lattice_points(P) == l, Pss[l])
    end

end

@testset "Castryck's classification" begin

    max_genus = 20

    st = InMemoryCastryckStorage{Int}()
    classify_lattice_polygons_by_genus(st, max_genus)
    Pss = st.all_polygons

    a322343 = [16, 45, 120, 211, 403, 714, 1023, 1830, 2700, 3659, 6125, 8101, 11027, 17280, 21499, 28689, 43012, 52736, 68557, 97733]

    for i = 1 : max_genus
        @test length(Pss[i]) == a322343[i]
        @test all(P -> number_of_interior_lattice_points(P) == i, Pss[i])
    end

end

@testset "Brown & Kasprzyk's classification" begin

    max_side_length = 6

    square(m) = convex_hull(LatticePoint{Int}[(0,0),(m,0),(0,m),(m,m)])

    Pss = [subpolygons(square(m); use_affine_normal_form = true, only_equal_number_of_interior_lattice_points = false) for m = 1 : max_side_length];

    a374975 = [2, 15, 131, 1369, 13842, 129185]
    max_number_of_vertices = [4,6,8,9,10,12]
    number_of_vertex_maximizers = [1,1,1,1,15,2]

    @test all(m -> length(Pss[m]) - length(Pss[m-1]) == a374975[m], 2 : max_side_length)
    @test all(m -> maximum(number_of_vertices, Pss[m]) == max_number_of_vertices[m], 1 : max_side_length)
    @test all(m -> length(filter(P -> number_of_vertices(P) == max_number_of_vertices[m], Pss[m])) == number_of_vertex_maximizers[m], 2 : max_side_length)

end

@testset "Maximal polygons in R x [-1,1]" begin
    expected_numbers = [1 2 4 5 6 7 8 9 10 11 12;
                        4 9 13 18 22 26 30 34 38 42 46;
                        12 26 41 54 68 81 94 107 120 133 146;
                        24 57 86 117 145 174 203 231 259 288 316]

    for k = 1 : 4, i = 0 : 10
        Ps = classify_maximal_polygons_m1p1(k,i)
        @test length(Ps) == expected_numbers[k,i+1]
        @test all(P -> minimal_number_of_interior_integral_lines(P) == 1, Ps)
        @test all(is_maximal, Ps)
    end
end

@testset "Maximal polygons with no interior lattice points" begin
    expected_numbers = [1,4,14,39,134,299]
    for k = 1 : 6
        Ps = classify_maximal_lattice_free_polygons(k)
        @test length(Ps) == expected_numbers[k]
        @test all(P -> number_of_interior_lattice_points(P) == 0, Ps)
        @test all(is_maximal, Ps)
    end
end

@testset "Maximal polygons with one interior latticie point" begin
    expected_numbers = [3,10,39]
    for k = 1 : 3
        Ps = classify_maximal_polygons_genus_one(k)
        @test length(Ps) == expected_numbers[k]
        @test all(P -> number_of_interior_lattice_points(P) == 1, Ps)
        @test all(is_maximal, Ps)
    end
end

@testset "Polygons with one interior lattice point" begin
    expected_numbers = [16,5145,924042]
    for k = 1 : 3
        Ps = classify_polygons_genus_one(k)
        @test length(Ps) == expected_numbers[k]
        @test all(P -> number_of_interior_lattice_points(P) == 1, Ps)
    end
end

@testset "LDP Polygons with one interior lattice point" begin
    expected_numbers = [16,505,48032]
    for k = 1 : 3
        Ps = classify_polygons_genus_one(k; primitive=true)
        @test length(Ps) == expected_numbers[k]
        @test all(P -> number_of_interior_lattice_points(P) == 1, Ps)
    end
end

@testset "BÃ¤uerle's classification" begin

    a145582 = [5, 7, 18, 13, 33, 26, 45, 27, 51, 51, 67, 53, 69, 74, 133, 48,
               89, 81, 102, 110, 178, 105, 124, 109, 161, 119, 164, 135, 142,
               187, 140, 105, 274, 159, 383, 169, 145, 166, 329, 221, 177, 266,
               180, 230, 404, 189, 220, 213, 315, 264, 384, 233, 225, 260, 573,
               298, 420, 241, 276, 393, 216, 252, 593, 202, 607, 394, 247, 321,
               540, 560, 310, 353, 249, 283, 701, 336, 783, 458, 316, 439, 464,
               318, 341, 557, 764, 307, 638, 464, 363, 612, 816, 389, 639, 368,
               914, 432, 341, 551, 893, 549, 352, 583, 385, 539, 1377, 383,
               409, 536, 377, 840, 756, 580, 377, 642, 1058, 512, 1010, 462,
               1191, 807, 702, 402, 811, 478, 888, 876, 416, 406, 869, 946,
               480, 868, 1202, 483, 1321, 680, 450, 772, 505, 1172, 931, 522,
               1395, 707, 1204, 482, 1319, 540, 518, 997, 499, 745, 1261, 1204,
               1308, 965, 493, 543, 1088, 919, 1477, 748, 517, 670, 2128, 590,
               635, 1160, 895, 1211, 1395, 613, 562, 962, 2017, 907, 1156, 646,
               689, 1285, 554, 1338, 1119, 864, 1442, 963, 1710, 762, 1864,
               1307, 655, 865, 579, 661, 2507, 1025, 647, 1319, 651, 1169,
               1206, 665, 1781, 1236, 1642, 690, 1756, 1009, 1971, 1937, 599,
               787, 1350, 736, 1799, 1137, 1736, 710, 1353, 1845, 1812, 1127,
               743, 1266, 2152, 709, 727, 1348, 721, 1578, 2935, 1088, 733,
               1510, 1915, 926, 1528, 1862, 886, 1632, 685, 1175, 1443, 815,
               2812, 1221, 2046, 1056, 1580, 1431, 894, 1818, 2264, 805, 3043,
               802, 753, 1291, 2020, 2038, 1989, 856, 885, 1782, 2056, 1897,
               1625, 929, 912, 1947, 838, 1363, 3391, 879, 3055, 1642, 818,
               917, 2210, 2424, 790, 1377, 856, 1071, 3460, 2076, 2391, 1453,
               1484, 1877, 1681, 948, 904, 2012, 2383, 1249, 2850, 976, 2588,
               2103, 2271, 927, 1793, 1426, 2250, 1972, 938, 2473, 1860, 2026,
               1005, 2087, 926, 1025, 4488, 1081, 928, 1569, 2796, 1812, 1927,
               2271, 2713, 1586, 3203, 973, 1919, 1446, 2760, 2926, 936, 1200,
               2361, 1107, 2620, 2310, 963, 1589, 1995, 2600, 2811, 2142, 2250,
               1409, 4063, 1052, 1037, 2026, 1083, 3030, 3339, 1922, 981, 1748,
               2795, 1338, 4351, 1206, 1286, 2648, 1840, 1106, 3122, 2561,
               2555, 1646, 1068, 1677, 2638, 2301, 2894, 2000, 1091, 2691,
               3684, 1651, 3009, 2783, 1105, 2855, 2155, 1200, 1203, 1768,
               6332, 1141, 2799, 1285, 1219, 3465, 3270, 2295, 2265, 1239,
               3054, 2866, 1105, 1249, 4731, 2305, 1116, 1885, 2957, 1390,
               3915, 2826, 3158, 2565, 1115, 2555, 2287, 1358, 3398, 2556,
               3205, 2165, 2492, 2949, 1431, 4108, 1094, 1217, 3078, 1760,
               4164, 2023, 3040, 1500, 5493, 2644, 1378, 2278, 1219, 2933,
               4870, 1425, 3631, 2018, 1358, 3754, 4423, 3008, 1237, 2359,
               3292, 1353, 2650, 2466, 1379, 3274, 3514, 1447, 2560, 1414,
               7089, 2848, 1253, 1398, 4114, 3378, 1373, 4169, 1293, 2138,
               5160, 1406, 1421, 3172, 3335, 2915, 2590, 2064, 3658, 2278,
               4860, 3652, 3369, 1547, 1588, 3338, 3188, 1401, 5700, 2548,
               3406, 2281, 1344, 1830, 2754, 4192, 1404, 2668, 3902, 3328,
               6896, 2038, 3814, 2330, 1416, 3011, 2913, 1613, 1657, 3799,
               3520, 3272, 4384, 1576, 1494, 4305, 3575, 1640, 4517, 1503,
               3701, 2737, 4273, 3403, 2996, 4267, 1478, 3104, 1466, 1802,
               7509, 1634, 4037, 3564, 2789, 3212, 3868, 3678, 3737, 2476,
               3887, 2106, 3155, 1718, 6181, 4065, 1420, 1575, 3027, 2885,
               3867, 4836, 1465, 1770, 3682, 4529, 4392, 3504, 4015, 1618,
               6008, 1820, 1620, 3368, 4072, 4936, 6390, 1592, 1552, 2965,
               3889, 1689, 5544, 2333, 1652, 4795, 1602, 4434, 3271, 3852,
               5863, 2908, 1549, 2706, 3169, 4176, 4269, 2612, 4576, 2233,
               7696, 1736, 1722, 4184, 4322, 3590, 3298, 2372, 1718, 4234,
               9257, 1951, 3366, 3875, 1881, 4389, 1574, 3728, 3972, 1866,
               6423, 2696, 1722, 3098, 6950, 3522, 4622, 4139, 1644, 1836,
               6694, 5131, 1649, 2773, 1736, 4341, 5618, 1870, 4809, 4156,
               4346, 1802, 7274, 1959, 4514, 6352, 1612, 2433, 3333, 1823,
               4371, 3354, 6323, 4188, 4520, 3635, 1715, 2916, 1823, 4506,
               7074, 4319, 1933, 3365, 5292, 5106, 6968, 1946, 1741, 2920,
               4675, 2804, 4320, 4422, 2027, 6340, 1778, 1907, 7743, 2702,
               10245, 3736, 5199, 2225, 3779, 4070, 5059, 4770, 1785, 1975,
               7115, 3138, 1800, 3010, 4765, 5302, 3703, 4377, 1932, 4516,
               4614, 3880, 3765, 2694, 4884, 5691, 1879, 2204, 9817, 2016,
               4935, 4245, 4979, 2058, 3967, 6113, 2006, 4880, 4827, 3846,
               7448, 1979, 4874, 3689, 1899, 4258, 4962, 2968, 5426, 6400,
               10949, 2430, 4126, 2273, 2346, 5396, 4971, 3142, 3797, 2211,
               6642, 4539, 2031, 5772, 4310, 4074, 5131, 3557, 1995, 2170,
               10340, 3594, 5315, 4129, 2017, 4953, 8510, 4641, 2029, 4253,
               5087, 2140, 5199, 5744, 5462, 5214, 2016, 3193, 4254, 4889,
               5371, 5749, 1994, 2193, 8978, 5904, 1980, 3312, 5242, 2458,
               9606, 2233, 5766, 3489, 2119, 8985, 4011, 2268, 2107, 4317,
               7042, 2956, 8393, 2360, 5875, 7332, 6100, 5006, 6667, 4496,
               5100, 3398, 2075, 2481, 4397, 4630, 5611, 5867, 4901, 2220,
               8460, 2466, 2260, 6880, 6078, 4896, 5314, 2253, 5600, 3984,
               12112, 4939, 4437, 3058, 2309, 5814, 2171, 5646, 4392, 5038,
               5581, 5234, 5700, 2350, 11102, 5643, 2153, 3545, 2238, 3159,
               11531, 5398, 2283, 5397, 2187, 4884, 4469, 4285, 8861, 3765,
               6056, 6464, 7017, 2620, 2694, 8441, 3965, 2269, 4384, 2431,
               8326, 4714, 8833, 3382, 4553, 6596, 5856, 4319, 2288, 5164,
               10993, 3328, 2356, 7478, 2312, 5801, 9136, 2547, 2497, 4697,
               5718, 2446, 6730, 5484, 6534, 6917, 5540, 3252, 5557, 5321,
               10713, 4270, 2334, 2542, 4902, 7522, 2460, 6670, 2344, 6160,
               9235, 2471, 2423, 5080, 5915, 5214, 8441, 2714, 6693, 4007,
               6512, 4990, 10773, 2695, 6610, 6814, 6272, 5506, 9442, 3258,
               5816, 3838, 2399, 2809, 5908, 10177, 2550, 5709, 6829, 2558,
               9287, 2764, 6498, 6340, 2496, 7013, 4939, 2718, 6713, 9004,
               7724, 2584, 6153, 4575, 2529, 7322, 9182, 2842, 5078, 2779,
               13868, 6796, 2430, 5740, 4960, 6454, 2449, 4071, 6991, 4101,
               14187, 5486, 2486, 4802, 5801, 7129, 5081, 7792, 2524, 5155,
               6491, 3133, 10846, 2883, 6745, 6675, 4205, 5672, 6246, 2775,
               6352, 8171, 2564, 5300, 10330, 5464, 2671, 4823, 6707, 2774,
               13411, 3500, 2540, 4188, 7462, 8759, 6201, 2733, 2678, 5591,
               6671, 6360, 10574, 6643, 7241, 9723, 2559, 4449, 5145, 6171,
               6583, 5017, 2633, 2858, 8000, 6407]

    for gi = 1 : 1000
        Ps = classify_lattice_triangles_by_gorenstein_index(gi)
        @test length(Ps) == a145582[gi]
        @test all(P -> gorenstein_index(P) == gi, Ps)
        # Also test Andreas degree bound
        @test maximum(degree, Ps) == (gi == 1 ? 9 : 2*(gi+1)^2 // gi)
    end

end

